version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments - backend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
      - run:
          name: Destroy environments - frontend
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
      - run:
          name: Empty S3 Bucket to be able to remove stack
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force 

  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
            type: string      
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |

                SUCCESS=$(curl --insecure  https://kvdb.io/FS3hVsEzwoNt2BqndJbxfb/migration_<< parameters.workflow_id >>)
                echo $SUCCESS
                if (( $SUCCESS == 1 ));
                then
                    pwd
                    cd backend
                    npm install
                    npm run migration:revert
                fi 
         
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend           
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Run test-frontend
          command: |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/test]
          key: test-frontend
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Run test-backend
          command: |
             cd backend
             npm install
             npm run test
      - save_cache:
          paths: [backend/test]
          key: test-backend     

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Run scan-frontend
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical
           #  npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Run scan-backend
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm install --save-dev webpack@5.72.1
             npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout  
      - run:
          name: Install tar and gzip
          command: 

                yum install -y tar gzip        
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
          # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
          #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |

            aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory1.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      # Here's where you will add some code to rollback on failure   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11  #, amazon/aws-cli]
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["4e:27:4b:b1:89:2e:f2:9a:22:b2:2b:8e:db:39:e8:ab"]
      # attach workspace
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli --upgrade
            apk add --update ansible 
          #exit 1

      - run:
          name: Configure server  
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
          #  exit 1
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |

            cd backend
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

            npm install  
            npm install --save-dev webpack@5.72.1       
            npm run build
            npm run migrations > migrations_dump.txt

          #  exit 1
      - run:
          name: Send migration results to memstash
          command: |
            pwd
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/FS3hVsEzwoNt2BqndJbxfb/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'

            fi
          # 
          #  exit 1


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout   
      - run:
          name: Install dependencies  tar gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Install dependencies nodejs
          command: |
            cd frontend
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Install dependencies awscli
          command: |
            yum -y install awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030" 
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            echo ENVIRONMENT=production > ".env"

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["4e:27:4b:b1:89:2e:f2:9a:22:b2:2b:8e:db:39:e8:ab"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies deploy-backend
          command: |
            apk add openssh-client
            apk update
            apk upgrade
            apk add tar gzip
            python -m pip install --upgrade pip
            pip install awscli --upgrade
            apk add --update ansible
            apk add nodejs npm
            aws --version
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            pwd
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            echo "[web]" >> /root/project/backend/inventory.txt
            aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> /root/project/backend/inventory.txt
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"

              cat /root/project/backend/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /root/project/backend/inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: 
          name: dependences
          command: |            
            python -m pip install --upgrade pip 
            pip install awscli --upgrade
            apk add curl
      - run:
          name: smoke test - backend           #  export API_URL="http://${BACKEND_IP}:3030"
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"  
            echo "${API_URL}"
         

            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi      
      - run:
          name: smoke test - frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
           
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout         # Checkout code from git
      - run:
          name: Install dependencies
          command: |
                yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          #--parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \ i think it is wrong
          command: |

            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
      # Here's where you will add some code to rollback on failure 
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
         
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |           
            if [["${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}"]];
            then
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            echo "--------Delete confirmed-----------"
            else
            echo "--------Cannot cleanup-----------"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
        # requires: [build-frontend, build-backend]
         requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
         # requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]